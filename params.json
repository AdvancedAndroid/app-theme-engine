{"name":"App-theme-engine","tagline":"An easy to use app-level theme engine for Android developers.","body":"# App Theme Engine (BETA)\r\n\r\nApp Theme Engine is a library that makes it easy for developers to implement a theme system in \r\ntheir apps, similar to what's seen in [Cabinet](https://play.google.com/store/apps/details?id=com.afollestad.cabinet) \r\nand [Impression](https://github.com/afollestad/impression).\r\n\r\nDownload the [latest sample APK](https://github.com/afollestad/app-theme-engine/raw/master/sample/Sample.apk) to check it out! \r\n\r\n![Showcase](https://raw.githubusercontent.com/afollestad/app-theme-engine/master/art/showcase.png)\r\n\r\n# When To NOT Use This Library\r\n\r\nIf your app has two themes, a light theme and a dark theme, do not use this library to configure them. \r\nOnly use this library if you intend to give the user the ability to change the color of UI elements in your app.ï»¿\r\n\r\n---\r\n\r\n# Table of Contents\r\n\r\n1. [Gradle Dependency](https://github.com/afollestad/app-theme-engine#gradle-dependency)\r\n    1. [Repository](https://github.com/afollestad/app-theme-engine#repository)\r\n    2. [Dependency](https://github.com/afollestad/app-theme-engine#dependency)\r\n2. [Config](https://github.com/afollestad/app-theme-engine#config)\r\n    1. [Modifiers](https://github.com/afollestad/app-theme-engine#modifiers)\r\n    2. [Keys](https://github.com/afollestad/app-theme-engine#keys)\r\n    3. [Default Configuration](https://github.com/afollestad/app-theme-engine#default-configuration)\r\n    4. [Value Retrieval](https://github.com/afollestad/app-theme-engine#value-retrieval)\r\n    5. [Customizers](https://github.com/afollestad/app-theme-engine#customizers)\r\n    6. [Marking as Changed](https://github.com/afollestad/app-theme-engine#marking-as-changed)\r\n3. [Applying](https://github.com/afollestad/app-theme-engine#applying)\r\n    1. [ATEActivity](https://github.com/afollestad/app-theme-engine#ateactivity)\r\n    2. [Custom Activities and Fragments](https://github.com/afollestad/app-theme-engine#custom-activities-and-fragments)\r\n    3. [Toolbars, Menus and Overflows](https://github.com/afollestad/app-theme-engine#toolbars-menus-and-overflows)\r\n    4. [Lists and Individual Views](https://github.com/afollestad/app-theme-engine#lists-and-individual-views)\r\n    5. [Navigation Drawers](https://github.com/afollestad/app-theme-engine#navigation-drawers)\r\n    6. [Task Description (Recents)](https://github.com/afollestad/app-theme-engine#task-description-recents)\r\n4. [Tags](https://github.com/afollestad/app-theme-engine#tags)\r\n    1. [Background Colors](https://github.com/afollestad/app-theme-engine#background-colors) \r\n    2. [Text Colors](https://github.com/afollestad/app-theme-engine#text-colors)\r\n    3. [Text Link Colors](https://github.com/afollestad/app-theme-engine#text-link-colors)\r\n    3. [Text Shadow Colors](https://github.com/afollestad/app-theme-engine#text-shadow-colors)\r\n    3. [Tint Colors](https://github.com/afollestad/app-theme-engine#tint-colors)\r\n5. [Pre-made Views](https://github.com/afollestad/app-theme-engine#pre-made-views)\r\n\r\n---\r\n\r\n# Gradle Dependency\r\n\r\n[ ![JitPack](https://img.shields.io/github/release/afollestad/app-theme-engine.svg?label=jitpack) ](https://jitpack.io/#afollestad/app-theme-engine)\r\n[![Build Status](https://travis-ci.org/afollestad/app-theme-engine.svg)](https://travis-ci.org/afollestad/app-theme-engine)\r\n[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?style=flat-square)](https://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\n#### Repository\r\n\r\nAdd this in your root `build.gradle` file (**not** your module `build.gradle` file):\r\n\r\n```gradle\r\nallprojects {\r\n\trepositories {\r\n\t\t...\r\n\t\tmaven { url \"https://jitpack.io\" }\r\n\t}\r\n}\r\n```\r\n\r\n#### Dependency\r\n\r\nAdd this to your module's `build.gradle` file:\r\n\r\n```gradle\r\ndependencies {\r\n\t...\r\n\tcompile('com.github.afollestad:app-theme-engine:0.4.0@aar') {\r\n\t\ttransitive = true\r\n\t}\r\n}\r\n```\r\n\r\n---\r\n\r\n# Config\r\n\r\nBy default, Android app themes are static. They cannot be changed dynamically after an APK is built. This \r\nlibrary allows you to dynamically change theme colors at runtime.\r\n\r\nAll configuration options are persisted using SharedPreferences, meaning once you set them, you don't have \r\nto set them again unless you want the value to be changed from what it was previously.\r\n\r\n#### Modifiers\r\n\r\nHere are a few configuration methods that can be used:\r\n\r\n```java\r\n// 0 to disable, sets a default theme for all Activities which use this config key\r\nATE.config(this, null) \r\n    // 0 to disable, sets a default theme for all Activities which use this config key\r\n    .activityTheme(R.style.my_theme) \r\n    .coloredActionBar(true)\r\n    .primaryColor(color)\r\n    // when true, primaryColorDark is auto generated from primaryColor\r\n    .autoGeneratePrimaryDark(true) \r\n    .primaryColorDark(color)\r\n    .accentColor(color)\r\n    .coloredStatusBar(true)\r\n    // by default, is equal to primaryColorDark unless coloredStatusBar is false\r\n    .statusBarColor(color)\r\n     // dark status bar icons on Marshmallow (API 23)+\r\n    .lightStatusBarMode(Config.LIGHT_STATUS_BAR_AUTO)\r\n    .coloredNavigationBar(false)\r\n    // by default, is equal to primaryColor unless coloredNavigationBar is false\r\n    .navigationBarColor(color)\r\n    .textColorPrimary(color)\r\n    .textColorPrimaryInverse(color)\r\n    .textColorSecondary(color)\r\n    .textColorSecondaryInverse(color)\r\n    // enables or disables the next 4 values\r\n    .navigationViewThemed(true) \r\n    .navigationViewSelectedIcon(color)\r\n    .navigationViewSelectedText(color)\r\n    .navigationViewNormalIcon(color)\r\n    .navigationViewNormalText(color)\r\n    // activity, fragment, or view\r\n    .apply(this);\r\n```\r\n\r\nThere's also color resource and color attribute variations of the color modifiers. For an example: \r\nrather than using `primaryColor(int)`, you could use `primaryColorRes(int)` or `primaryColorAttr(int)` \r\nin order to pass a value in the format `R.color.resourceValue` or `R.attr.attributeValue`.\r\n\r\n#### Keys\r\n\r\nThe second parameter of `ATE.config(Context, String)` was null above, because it's optional. You can instead \r\npass a String of any value as a key. This will allow you to keep separate configurations, which can be applied \r\nto different Activities, Fragments, Views, at will. Passing null specifies to use the default. You could have \r\ntwo Activities which store their own separate theme values independently, or you could have two configurations \r\nfor a light and dark theme.\r\n\r\nThe [Applying](https://github.com/afollestad/app-theme-engine#applying) section will go over this a bit more.\r\n\r\n#### Default Configuration\r\n\r\nIf you want to setup a default configuration the first time your app is run, you can use code like this:\r\n\r\n```java\r\nif (!ATE.config(this, null).isConfigured()) {\r\n    // Setup default options for the default (null) key\r\n}\r\n```\r\n\r\nAgain, the second parameter is an optional key.\r\n\r\n#### Value Retrieval\r\n\r\nUsing the `Config` class, you can retrieve your theme values (if you need to for any reason). For an example:\r\n\r\n```java\r\nint primaryColor = Config.primaryColor(this, null);\r\n```\r\n\r\nAnd yet again, the second parameter is an optional key.\r\n\r\n#### Customizers\r\n\r\nCustomizers are interfaces your Activities can implement to specify theme values without saving them \r\nin your Configuration (if you don't want to use separate keys for different screens).\r\n\r\n```java\r\npublic class MyActivity extends AppCompatActivity \r\n        implements ATEActivityThemeCustomizer, ATEStatusBarCustomizer, ATETaskDescriptionCustomizer, ATENavigationBarCustomizer {\r\n    \r\n    @StyleRes\r\n    @Override\r\n    public int getActivityTheme() {\r\n        // Self explanatory. Can be used to override activityTheme() config value if set.\r\n        return R.style.my_activity_theme;\r\n    }\r\n    \r\n    @ColorInt\r\n    @Override\r\n    public int getStatusBarColor() {\r\n        // Normally the status bar is a darker version of the primary theme color\r\n        return Color.RED;\r\n    }\r\n    \r\n    @ColorInt\r\n    @Override\r\n    public int getTaskDescriptionColor() {\r\n        // Task description is the color of your Activity's entry in Android's recents screen\r\n        return Color.BLUE;\r\n    }\r\n    \r\n    @ColorInt\r\n    @Override\r\n    public int getNavigationBarColor() {\r\n        // Navigation bar is usually either black, or equal to the primary theme colro\r\n        return Color.GREEN;\r\n    }\r\n}\r\n```\r\n\r\nYou can override some or all, to fit your needs. But again, you don't *need* to use these if you use keys for \r\ndifferent configurations.\r\n\r\n#### Marking as Changed\r\n\r\nIn the sample project, you can switch between a light and dark theme. The preference that says whether or \r\nnot the dark theme is active is not part of ATE. The sample project tells MainActivity that it\r\nneeds to restart on return from the Settings Screen when the dark theme has been toggled.\r\n\r\n```java\r\n// Second parameter is an optional Config key\r\nConfig.markChanged(this, null);\r\n```\r\n\r\nThis method tells all already running Activities that the configuration has been changed since they were \r\nfirst opened, without having to edit other configuration values.\r\n\r\nYou can mark multiple configuration keys as changed:\r\n\r\n```java\r\nConfig.markChanged(this, \"light_theme\", \"dark_theme\");\r\n```\r\n\r\n---\r\n\r\n# Applying\r\n\r\nOnce you have configurations set, you can apply the theme engine to Activities, Fragments, and even \r\nindividual views.\r\n\r\n#### ATEActivity\r\n\r\nAs seen in the sample project, you can have all Activities in your app extends `ATEActivity`. This will do\r\nall the heavy lifting for you.\r\n\r\n```java\r\npublic class MyActivity extends ATEActivity {\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.my_layout);\r\n    }\r\n}\r\n```\r\n\r\nIf you were to leave the Activity, change theme values (e.g. in a Settings screen), and come back,\r\nthe Activity would automatically recreate itself.\r\n\r\nYou can also change theme values in real time within the Activity using the `ATE.apply()` or `Config#apply()` methods.\r\n\r\n---\r\n\r\nThe [Config](https://github.com/afollestad/app-theme-engine#config) section emphasized the fact that you can\r\nuse keys to separate different theme configurations. `ATEActivity` has an optional override method called \r\n`getATEKey()` which can be used to specify a configuration to use in individual activities.\r\n\r\n```java\r\npublic class MyActivity extends ATEActivity {\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.my_layout);\r\n    }\r\n    \r\n    @Nullable\r\n    @Override\r\n    protected String getATEKey() {\r\n        return getClass().getName();\r\n    }\r\n}\r\n```\r\n\r\nThe value returned here is used in many other areas too. For an example, there are two versions of almost every method. \r\nOne that accepts a config key, one that doesn't. `ATE.config(Context, String)` is a good example. If you were to use \r\n `ATE.config(Context)` and pass the above `Activity` as the `Context`, it would automatically use the return value \r\n of `getATEKey()` as the second parameter even though it wasn't directly specified.\r\n\r\n#### Custom Activities and Fragments\r\n\r\nIf you don't use `ATEActivity`, there's a few things you have to do:\r\n\r\n```java\r\npublic class MyActivity extends AppCompatActivity {\r\n\r\n    private long updateTime = -1;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        // Apply theming to status bar, nav bar, and task description (recents).\r\n        // Second parameter is optional config key.\r\n        ATE.preApply(this, null);\r\n        super.onCreate(savedInstanceState);\r\n        \r\n        // Always call BEFORE apply()\r\n        setContentView(R.layout.my_layout);\r\n        \r\n        // Store the time the engine was initially applied, so the Activity can restart when coming back after changes\r\n        updateTime = System.currentTimeMillis();\r\n        \r\n        // Apply colors to other views in the Activity. Call after all initial view setup, including toolbars!\r\n        // Second parameter is optional config key.\r\n        ATE.apply(this, null);\r\n    }\r\n    \r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        // If values were applied/committed (from Config) since the Activity was created, recreate it now\r\n        // Third parameter is optional config key.\r\n        if (ATE.didValuesChange(this, updateTime, null))\r\n            recreate();\r\n    }\r\n    \r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.my_menu, menu);\r\n        ATE.applyMenu(this, getATEKey(), menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onMenuOpened(int featureId, Menu menu) {\r\n        ATE.applyOverflow(this, getATEKey());\r\n        return super.onMenuOpened(featureId, menu);\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nYou can also apply theming to views in a Fragment:\r\n\r\n```java\r\npublic class MyFragment extends Fragment {\r\n\r\n    ...\r\n\r\n    @Override\r\n    public void onViewCreated(View view, Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        ATE.apply(this, null);\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nAnd again, replace occurrences of `null` above with a key if you need separate configurations.\r\n\r\n#### Toolbars, Menus, and Overflows\r\n\r\nATE will automatically theme your toolbars or support action bars.\r\n\r\n*If the toolbar background is light*: the navigation icon (e.g. home up or drawer icon) will be tinted black,\r\nthe title text color will be black, the menu icons will be tinted black, and the overflow button will be tinted black.\r\n\r\n*If the toolbar background is dark*: the navigation icon (e.g. home up or drawer icon) will be tinted white,\r\nthe title text color will be white, the menu icons will be tinted white, and the overflow button will be tinted white. \r\n\r\n---\r\n\r\nATE will also automatically theme widgets in your overflow menu, such as checkboxes and radio buttons.\r\n\r\n#### Lists and Individual Views\r\n\r\nYou theme individual views like this:\r\n\r\n```java\r\nATE.apply(view, null);\r\n```\r\n\r\nThe second parameter is an optional Config key.\r\n\r\n---\r\n\r\nWhen working with lists, you have to apply the theme engine to each individual view in your adapter.\r\n\r\nFor *RecyclerViews*:\r\n\r\n```java\r\npublic static class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder> {\r\n\r\n    public MyAdapter() {\r\n    }\r\n\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        View list = LayoutInflater.from(parent.getContext())\r\n                .inflate(R.layout.list_item, parent, false);\r\n        return new MyViewHolder(list);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(MyViewHolder holder, int position) {\r\n        // Setup views\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return 20;\r\n    }\r\n\r\n    public static class MyViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        public MyViewHolder(View itemView) {\r\n            super(itemView);\r\n            // It's recommended you only apply the theme the first time the holder is created.\r\n            // Second parameter is optional key.\r\n            ATE.apply(itemView, null);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFor *ListViews*:\r\n\r\n```java\r\npublic static class MyAdapter extends BaseAdapter {\r\n\r\n    @Override\r\n    public int getCount() {\r\n        return 20;\r\n    }\r\n\r\n    @Override\r\n    public Object getItem(int position) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public long getItemId(int position) {\r\n        return position;\r\n    }\r\n\r\n    @Override\r\n    public View getView(int position, View convertView, ViewGroup parent) {\r\n        if (convertView == null) {\r\n            convertView = LayoutInflater.from(parent.getContext())\r\n                    .inflate(R.layout.list_item, parent, false);\r\n            // Only apply the first time the view is created.\r\n            // Second parameter is optional key.\r\n            ATE.apply(convertView, null);\r\n        }\r\n        return convertView;\r\n    }\r\n}\r\n```\r\n\r\n#### Navigation Drawers\r\n\r\nATE will automatically adapt when your Activity has a `DrawerLayout` at its root. When `coloredStatusBar()` \r\nis set to true, the primary dark theme color will be applied to the `DrawerLayout` rather than directly to \r\nthe Window status bar. Thus, the status bar will be transparent when the drawer is open, and your theme\r\ncolor when it's closed. You don't have to manually do anything.\r\n\r\nIf you use `NavigationView` from the design support library, ATE will by default theme it. There are \r\nnavigation view theming configuration methods discussed in the next section. If your drawer uses a `Fragment`\r\nor plain `ListView`/`RecyclerView`, you have to do what's discussed in the previous section.\r\n\r\n#### Task Description (Recents)\r\n\r\nYou don't have to do anything extra for this. Your app's Android recents (multi-tasking) entry will \r\nbe themed to your primary color automatically.\r\n\r\nThere is however an `ATETaskDescriptionCustomizer` that's discussed in the [Customizers](https://github.com/afollestad/app-theme-engine#customizers)\r\n section.\r\n\r\n---\r\n\r\n# Tags\r\n\r\nIf you haven't used tags before, they can be applied to views directly from your XML layouts:\r\n\r\n```xml\r\n<View\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:tag=\"tag-value-here\" />\r\n```\r\n\r\nThe theme engine allows you to apply theme colors to any view using tags. **You can even use multiple tags, separated by commas**:\r\n\r\n```xml\r\n<View\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:tag=\"tag-one,tag-two,tag-three\" />\r\n```\r\n\r\nHere's a list of available tag values:\r\n\r\n#### Background Colors\r\n\r\nYou can change the background of any type of view.\r\n\r\n1. `bg_primary_color` - sets the background to the primary color.\r\n2. `bg_primary_color_dark` - sets the background to the primary dark color.\r\n3. `bg_accent_color` - sets the background to the accent color.\r\n4. `bg_text_primary` - sets the background to the primary text color.\r\n5. `bg_text_primary_inverse` - sets the background to the inverse primary text color.\r\n6. `bg_text_secondary` - sets the background to the secondary text color.\r\n7. `bg_text_secondary_inverse` - sets the background to the inverse secondary text color.\r\n\r\n#### Text Colors\r\n\r\nYou can only change the text color of a view that extends `TextView`, which includes `Button`'s.\r\n\r\n1. `text_primary_color` - sets the text color to the primary color.\r\n2. `text_primary_color_dark` - sets the text color to the primary dark color.\r\n3. `text_accent_color` - sets the text color to the accent color.\r\n4. `text_primary` - sets the text color to the primary text color.\r\n5. `text_primary_inverse` - sets the text color to the inverse primary text color.\r\n6. `text_secondary` - sets the text color to the secondary text color.\r\n7. `text_secondary_inverse` - sets the text color to the inverse secondary text color.\r\n\r\n#### Text Link Colors\r\n\r\nThis should only really be needed on `TextView'`s, it changes the color of links when TextViews are linkable.\r\n\r\n1. `text_link_primary_color` - sets the link text color to the primary color.\r\n2. `text_link_primary_color_dark` - sets the link text color to the primary dark color.\r\n3. `text_link_accent_color` - sets the link text color to the accent color.\r\n4. `text_link_primary` - sets the link text color to the primary text color.\r\n5. `text_link_primary_inverse` - sets the link text color to the inverse primary text color.\r\n6. `text_link_secondary` - sets the link text color to the secondary text color.\r\n7. `text_link_secondary_inverse` - sets the link text color to the inverse secondary text color.\r\n\r\n#### Text Shadow Colors\r\n\r\nThis can be used on `TextView'`s, it changes the `shadowColor` value.\r\n\r\n1. `text_shadow_primary_color` - sets the link text color to the primary color.\r\n2. `text_shadow_primary_color_dark` - sets the link text color to the primary dark color.\r\n3. `text_shadow_accent_color` - sets the link text color to the accent color.\r\n4. `text_shadow_primary` - sets the link text color to the primary text color.\r\n5. `text_shadow_primary_inverse` - sets the link text color to the inverse primary text color.\r\n6. `text_shadow_secondary` - sets the link text color to the secondary text color.\r\n7. `text_shadow_secondary_inverse` - sets the link text color to the inverse secondary text color.\r\n\r\n#### Tint Colors\r\n\r\nYou can tint `CheckBox`'s, `RadioButton`'s, `ProgressBar`'s, `EditText`'s, `SeekBar`'s, and `ImageView`'s. \r\n\r\n1. `tint_primary_color` - tints the view with the primary color.\r\n2. `tint_primary_color_dark` - tints the view with the primary dark color.\r\n3. `tint_accent_color` - tints the view with the accent color.\r\n4. `tint_text_primary` - tints the view with the primary text color.\r\n5. `tint_text_primary_inverse` - tints the view with the inverse primary text color.\r\n6. `tint_text_secondary` - tints the view with the secondary text color.\r\n7. `tint_text_secondary_inverse` - tints the view with the inverse secondary text color.\r\n\r\n---\r\n\r\nBackground tints work on any type of view:\r\n\r\n1. `bg_tint_primary_color` - tints the view background with the primary color.\r\n2. `bg_tint_primary_color_dark` - tints the view background with the primary dark color.\r\n3. `bg_tint_accent_color` - tints the view background with the accent color.\r\n4. `bg_tint_text_primary` - tints the view background with the primary text color.\r\n5. `bg_tint_text_primary_inverse` - tints the view background with the inverse primary text color.\r\n6. `bg_tint_text_secondary` - tints the view background with the secondary text color.\r\n7. `bg_tint_text_secondary_inverse` - tints the view background with the inverse secondary text color.\r\n\r\n---\r\n\r\nYou can even use background tint selectors:\r\n\r\n1. `bg_tint_primary_color_selector_lighter` - tints the view background with a primary color selector, which is lighter when pressed.\r\n2. `bg_tint_primary_color_dark_selector_lighter` - tints the view background with a primary dark color selector, which is lighter when pressed.\r\n3. `bg_tint_accent_color_selector_lighter` - tints the view background with a accent color selector, which is lighter when pressed.\r\n4. `bg_tint_text_primary_selector_lighter` - tints the view background with a primary text color selector, which is lighter when pressed.\r\n5. `bg_tint_text_secondary_selector_lighter` - tints the view background with a secondary text color selector, which is lighter when pressed.\r\n6. `bg_tint_primary_color_selector_darker` - tints the view background with a primary color selector, which is lighter when pressed.\r\n6. `bg_tint_primary_color_selector_darker` - tints the view background with a primary color selector, which is lighter when pressed.\r\n7. `bg_tint_primary_color_dark_selector_darker` - tints the view background with a primary dark color selector, which is lighter when pressed.\r\n8. `bg_tint_accent_color_selector_darker` - tints the view background with a accent color selector, which is lighter when pressed.\r\n9. `bg_tint_text_primary_selector_darker` - tints the view background with a primary text color selector, which is lighter when pressed.\r\n10. `bg_tint_text_primary_inverse_selector_darker` - tints the view background with a inverse primary text color selector, which is lighter when pressed.\r\n11. `bg_tint_text_secondary_selector_darker` - tints the view background with a secondary text color selector, which is lighter when pressed.\r\n12. `bg_tint_text_secondary_inverse_selector_darker` - tints the view background with a inverse secondary text color selector, which is lighter when pressed.\r\n\r\n---\r\n\r\n# Pre-made Views\r\n\r\nSeven views come stock with this library:\r\n\r\n1. `ATECheckBox` - tints itself to the accent color.\r\n2. `ATERadioButton` - tints itself to the accent color.\r\n3. `ATEEditText` - tints itself to the accent color\r\n4. `ATEProgressBar` - tints itself to the accent color.\r\n5. `ATESeekBar` - tints itself to the accent color.\r\n6. `ATEPrimaryTextView` - sets its text color to the primary text color.\r\n7. `ATESecondaryTextView` - sets its text color to the secondary text color.\r\n\r\nAll that they really do is set their own tag to one of the tag values in the previous section,\r\nand then apply theming to themselves using the individual view `apply()` method.\r\n\r\n---\r\n\r\nIf you use Config keys in your app, you may want to apply theme to these pre-made views:\r\n\r\n```xml\r\n<com.afollestad.appthemeengine.ATECheckBox\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    app:ateKey_checkBox=\"your-config-key-here\" />\r\n```\r\n\r\nAll of the different views have a different suffix to `app:ateKey_`, since using the same attribute \r\nname for all of them would result in duplicate errors.\r\n\r\nYou can even use theme attributes in your Activity themes and reference them for this value (which is \r\ndone in the sample project since different keys are used for a light and dark theme).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}